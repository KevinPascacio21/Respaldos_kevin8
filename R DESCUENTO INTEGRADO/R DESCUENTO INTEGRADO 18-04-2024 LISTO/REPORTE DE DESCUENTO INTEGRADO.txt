INIT.PY:



# -*- coding: utf-8 -*-

from . import descuento_integrado
from . import rpt_descuento_integrado 

------------------------------------------------------------------------------------------------------

DESCUENTO_INTEGRADO.PY:


# -*- coding: utf-8 -*-

from ast import If
from email.policy import default
from odoo import api, fields, models, _
from odoo.exceptions import ValidationError, UserError
from datetime import datetime, timedelta
from pytz import timezone
from odoo.tools import float_round
import logging
_logger = logging.getLogger(__name__)


class Create_Rep(models.Model): 
    _name = 'r_descuento_integrado.cr'
    _description = 'reportes'

    name = fields.Char(string='Nombre ', required=True, copy=False, readonly=True, index=True, default=lambda self: _('New'))
    company_id = fields.Many2one(comodel_name='res.company', required=True, default=lambda self: self.env.company)
    
    fecha_inicio = fields.Date(string='Fecha inicial')
    fecha_final = fields.Date(string='Fecha final')
    fecha_reporte = fields.Datetime(string='Fecha de creaciÃ³n ', readonly=True, default=lambda self: fields.datetime.now())#

    relacion_ids = fields.Many2many(comodel_name='r_descuento_integrado.rd',  inverse_name='data_ids', string='Relacion')
    
    @api.model
    def create(self, vals):
        vals['name'] = 'Reporte de descuento integrado: ' + vals['fecha_inicio'] + ' - ' + vals['fecha_final']
        return super(Create_Rep, self).create(vals)
    

    # def write(self, vals):
    #     if 'fecha_inicio' in vals or 'fecha_final' in vals:
    #         vals['name'] = 'Reporte de descuento integrado: ' + vals.get('fecha_inicio', self.fecha_inicio) + ' - ' + vals.get('fecha_final', self.fecha_final)
    #     return super(Create_Rep, self).write(vals)





    
    def _get_time_zone(self):
        res_users_obj = self.env['res.users']
        userstz = res_users_obj.browse(self._uid).tz
        a = 0
        if userstz:
            hours = timezone(userstz)
            fmt = '%Y-%m-%d %H:%M:%S %Z%z'
            now = datetime.now()
            loc_dt = hours.localize(datetime(now.year, now.month, now.day,
                                             now.hour, now.minute, now.second))
            timezone_loc = (loc_dt.strftime(fmt))
            diff_timezone_original = timezone_loc[-5:-2]
            timezone_original = int(diff_timezone_original)
            s = str(datetime.now(timezone(userstz)))
            s = s[-6:-3]
            timezone_present = int(s)*-1
            a = timezone_original + ((
                timezone_present + timezone_original)*-1)
        return a
    
    def write(self, vals):
        vals['name'] = 'Reporte de descuento integrado: ' + vals['fecha_inicio'] + ' - ' + vals['fecha_final']
        return super(Create_Rep, self).write(self, vals)
    
    
    @api.onchange('fecha_inicio', 'fecha_final')
    def _get_name(self): 
        for doc in self:
            if doc.fecha_inicio and doc.fecha_final:

                init_date = doc.fecha_inicio
                out_date = doc.fecha_final
                time_zone = self._get_time_zone()

                 # --------------------------------------------------------- Fecha ---------------------------------------------------------

                fecha_entrada = init_date.strftime("%Y-%m-%d")
                fecha_salida = out_date.strftime("%Y-%m-%d")
                
                date_start = fecha_entrada + ' 00:00:00'
                date_end = fecha_salida + ' 23:59:59' # 17:00:00 hrs del servidor 23:59:59

                date_start_search = datetime.strptime(date_start, '%Y-%m-%d %H:%M:%S') + timedelta(hours=abs(time_zone))
                date_end_search = datetime.strptime(date_end, '%Y-%m-%d %H:%M:%S') + timedelta(hours=abs(time_zone))
                
                
                # notas = self.env['account.move'].search(["&","&",["invoice_date",">=",doc.fecha_inicio],["invoice_date","<=",doc.fecha_final], ["type_name","=","Factura"],"|","|","|",["move_type","=","out_invoice"],["total_cash_discount",">",0],["edi_state","=","sent"],["edi_state","=","to_cancel"]]) id
                notas = self.env['account.move'].search(["&","&",["invoice_date",">=", doc.fecha_inicio],["invoice_date","<=", doc.fecha_final], "|","|","|",["move_type","=","out_invoice"],["total_cash_discount",">",0],["edi_state","=","sent"],["edi_state","=","to_cancel"]]) #,["type_name","=","Factura"]])
                aux=0
                self.relacion_ids = [(5,0,0)]
                for res in notas:
                    if res.type_name == "Factura":
                        line = {}
                        line['name'] = res.name
                        line['partner_id'] = res.invoice_partner_display_name
                        line['invoice_date'] = res.invoice_date
                        line['total_cash_discount'] = res.total_cash_discount
                        self.relacion_ids = [(0,0,line)]


class reporte_save(models.Model): #este almacena los dato
    _name = 'r_descuento_integrado.rd'
    _description = 'Almacen de datos'

    data_ids = fields.Many2one(comodel_name='r_descuento_integrado.cr', string='Variables', readonly=True)

    name = fields.Char(string='Nombre')
    partner_id = fields.Char(string='Cliente')
    invoice_date = fields.Date(string='Fecha de la factura')
    currency_id = fields.Many2one('res.currency', string='Currency')
    total_cash_discount = fields.Monetary(string='Descuento', currency_field='currency_id')


    

---------------------------------------------------------------------------------------------------------

RPT_DESCUENTO_INTEGRADO.PY:

from odoo import api, fields, models
from datetime import datetime, timedelta #

class DescuentoInegrReport(models.Model):
    _name = 'report.report_descuen_integrado' 
    _inherit = 'report.report_xlsx.abstract' 
    _description = 'Reporte de descuento integrado'


    def generate_xlsx_report(self, workbook, data, descuento_integrado):
        for ctrl in descuento_integrado:
            report_name = 'Reporte de descuento integrado'
            # One sheet by partner

            #Celdas
            sheet = workbook.add_worksheet(report_name[:31])
            sheet.write(0, 3, report_name, workbook.add_format({'bold': True, 'align': 'center'}))
            sheet.set_column(1, 1, 20)
            sheet.set_column(2, 2, 25)
            sheet.set_column(3, 3, 25)
            sheet.set_column(4, 4, 25)


            title_cell = workbook.add_format({'bold': True, 'font_color': 'black', 'bg_color': '#F1FADA', 'align': 'center'})
            format_cell = workbook.add_format({'font_color': 'black', 'border': True, 'border_color': '#F1FADA', 'align': 'center'})
            format_cell_Date = workbook.add_format({'font_color': 'black', 'border': True, 'border_color': '#F1FADA', 'num_format': 'dd/mm/yy', 'align': 'center'})
            # format_cell_Date = workbook.add_format({'font_color': 'black', 'border': True, 'border_color': '#F1FADA', 'bg_color': '#F1FADA', 'num_format': 'dd/mm/yy', 'align': 'center'}) 


            sheet.write(2, 2, 'Nombre', title_cell)
            sheet.write(2, 3, 'Cliente', title_cell)
            sheet.write(2, 4, 'Fecha de la factura', title_cell)
            sheet.write(2, 5, 'Descuento', title_cell)

            row = 3
            for line in ctrl.relacion_ids:

                sheet.write(row, 2, line.name, format_cell)
                sheet.write(row, 3, line.partner_id, format_cell)
                sheet.write(row, 4, line.invoice_date, format_cell_Date)
                sheet.write(row, 5, line.total_cash_discount, format_cell)
                row += 1


------------------------------------------------------------------------------------------------------

REPORTS>DESCUENTO_INTEGRADO.XML:



<odoo>
    <data>        
        <record id="report_des_integr" model="ir.actions.report">
            <field name="name">Reporte de descuento integrado</field> 
            <field name="model">r_descuento_integrado.cr</field> 
            <field name="report_type">xlsx</field>
            <field name="report_name">report_descuen_integrado</field>
            <field name="report_file">Reporte de descuento integrado</field> 
            <field name="binding_model_id" ref="model_r_descuento_integrado_cr"/> 
            <field name="binding_type">report</field> 
        </record>
    </data>
</odoo>


-------------------------------------------------------------------------------------------------

SECURITY>IR MODEL ACCESS:

id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_r_descuento_integrado_cr,r_descuento_integrado.cr,model_r_descuento_integrado_cr,base.group_user,1,1,1,1
access_r_descuento_integrado_rd,r_descuento_integrado.rd,model_r_descuento_integrado_rd,base.group_user,1,1,1,1

-----------------------------------------------------------------------------------------------------
SECURITY.XML:

<odoo>
    <data>
        <!-- Reglas --><record model="ir.rule" id="des_integr_multi_comp_rule_report">
        <field name="name">Descuento integrado multi-company</field> 
            <field name="model_id" ref="model_r_descuento_integrado_cr"/>
            <field name="domain_force">[('company_id', 'in', company_ids)]</field>
        </record>
    </data>
</odoo>

------------------------------------------------------------------------------

VIEWS>DESCUENTO_INTEGRADO_VIEW.XML:


<odoo>
  <data>
    <record model="ir.ui.view"  id="reporte_con_form">
      <field name="name">Reporte de descuento integrado</field>
      <field name="model">r_descuento_integrado.cr</field>
      <field name="arch" type="xml">
        <form string="Sabana Control">
          <sheet>
            <div class="oe_title">
              <h1><field name="name" force_save="1" readonly="1"/></h1>              
            </div>
            <group> <!--inicio de la primera clase -->
              <!-- Controladores: -->
              <field name="fecha_inicio"/>
              <field name="fecha_final"/>                   
            </group>   <!--fin de la primera clase-->
            <field name="relacion_ids" widget="many2many" mode="tree" readonly="1" force_save="1"> 
              <tree create="false" editable="false" delete="false">
                <field name="name" style="pointer-events:none;" readonly="1" force_save="1"/>
                <field name="partner_id" style="pointer-events:none;" readonly="1" force_save="1"/>
                <field name="invoice_date" style="pointer-events:none;" readonly="1" force_save="1"/>
                <field name="total_cash_discount" style="pointer-events:none;" readonly="1" force_save="1"/>
              </tree>
            </field>
          </sheet>
        </form>
      </field>
    </record>
    <record model="ir.ui.view" id="cr_list"> 
      <field name="name">Reporte de descuento integrado</field>
      <field name="model">r_descuento_integrado.cr</field>
      <field name="arch" type="xml">
        <tree>
          <field name="name"/>
          <field name="fecha_inicio"/>
          <field name="fecha_final"/>
        </tree>
      </field>
    </record>
    <record model="ir.actions.act_window" id="cr_action_window">
      <field name="name">Reporte de descuento integrados</field>
      <field name="res_model">r_descuento_integrado.cr</field>
      <field name="view_mode">tree,form</field>
    </record>
    <!-- menu superior -->
    <!--nombre y icono en la barra de herramientasg -->
    <menuitem name="Reporte de descuento integrado" id="cr_menu_root" action="cr_action_window"/>
  </data>
</odoo>


-----------------------------------------------------------------------------------
MANIFIESTO:

# -*- coding: utf-8 -*-
{
    'name': "r_descuento_integrado",

    'summary': """
        Reporte de descuento integrado""",

    'description': """
        Reporte de descuento integrado
    """,

    'author': "Kevin",
    'website': "http://www.yourcompany.com",

    # Categories can be used to filter modules in modules listing
    # Check https://github.com/odoo/odoo/blob/14.0/odoo/addons/base/data/ir_module_category_data.xml
    # for the full list
    'category': 'Uncategorized',
    'version': '0.1',

    # any module necessary for this one to work correctly
    'depends': ['base', 'report_xlsx'],

    # always loaded
    'data': [
        'security/ir.model.access.csv',
        'security/security.xml',
        'reports/descuento_integrado.xml',
        'views/descuento_integrado_view.xml',
        'views/templates.xml',
    ],
    # only loaded in demonstration mode
    'demo': [
        'demo/demo.xml',
    ],
}


